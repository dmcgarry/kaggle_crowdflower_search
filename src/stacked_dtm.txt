from sklearn.pipeline import Pipeline, FeatureUnion
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.svm import SVR
from sklearn.decomposition import TruncatedSVD
from sklearn.preprocessing import StandardScaler
from sklearn.feature_selection import chi2, f_classif, SelectPercentile, f_regression, SelectKBest
from sklearn.base import BaseEstimator, TransformerMixin
from sklearn.linear_model import LogisticRegression, Ridge
from pandas import DataFrame

class VarSelect(BaseEstimator, TransformerMixin):
	def __init__(self, keys):
		self.keys = keys
	def fit(self, x, y=None):
		return self
	def transform(self, df):
		return df[self.keys].values

class ModelClassTransformer(BaseEstimator, TransformerMixin):
    def __init__(self, model):
        self.model = model
    def fit(self, *args, **kwargs):
        self.model.fit(*args, **kwargs)
        return self
    def transform(self, X, **transform_params):
        return DataFrame(self.model.predict_proba(X))

class ModelRegTransformer(BaseEstimator, TransformerMixin):
    def __init__(self, model):
        self.model = model
    def fit(self, *args, **kwargs):
        self.model.fit(*args, **kwargs)
        return self
    def transform(self, X, **transform_params):
        return DataFrame(self.model.predict(X))
        
pipeline = Pipeline([
	('union', FeatureUnion([
		('textReg', Pipeline([
			('textSelector', VarSelect(keys='text')),
			('tfidf', TfidfVectorizer(strip_accents='unicode', analyzer='word', token_pattern=r'\w{1,}', use_idf=True, smooth_idf=True, sublinear_tf=True)),
			('textFeat', SelectPercentile(chi2)),
			('glm', ModelRegTransformer(Ridge())),
		])),
		('textDTM', Pipeline([
			('textSelector', VarSelect(keys='text')),
			('tfidf', TfidfVectorizer(strip_accents='unicode', analyzer='word', token_pattern=r'\w{1,}', use_idf=True, smooth_idf=True, sublinear_tf=True)),
			('textFeat', SelectPercentile(chi2)),
			('glm', ModelClassTransformer(LogisticRegression(random_state=args.SEED))),
		])),
		('meta', Pipeline([
			('metaSelector', VarSelect(keys=['query_percent_title','doc2vec','word2vec','desc_len']))
		]))
	])),
	('scl', StandardScaler(copy=True, with_mean=True, with_std=True)),
	('finalFeat',SelectKBest(f_regression)),
	('svm', SVR(kernel='rbf'))
])

grid = {
	'union__textReg__tfidf__min_df':[3],'union__textReg__tfidf__max_df': [0.30],'union__textReg__tfidf__ngram_range':[(1,5)],
	'union__textReg__textFeat__percentile':[94],
	'union__textReg__glm__model__alpha':[1],
	'union__textDTM__tfidf__min_df':[3],'union__textDTM__tfidf__max_df': [0.30],'union__textDTM__tfidf__ngram_range':[(1,4)],
	'union__textDTM__textFeat__percentile':[95,94],
	'union__textDTM__glm__model__C':[2,4], 'union__textDTM__glm__model__class_weight':['auto'], 
	'finalFeat__k':[7],
	'svm__C': [0.25,0.5,0.75],'svm__degree':[1]
}